@App:name('DetectBurnApp')

@source(type = 'mqtt', url = 'mockurl', client.id = 'mqtt.stat1.Burn', topic = 'mockpref/stat1', username = 'mockuser', password = 'mockpw',
@map(type = 'json', @attributes(timestamp = '$.timestamp', i1_pos_switch = '$.i1_pos_switch', i2_pos_switch = '$.i2_pos_switch', i5_light_barrier = '$.i5_light_barrier', m1_speed = '$.m1_speed', o7_valve = '$.o7_valve', o8_compressor = '$.o8_compressor')))
define stream stat1Stream(timestamp string, i1_pos_switch int, i2_pos_switch int, i5_light_barrier int, m1_speed int, o7_valve int, o8_compressor int);

define stream stat1StreamDisc(timestamp string, i1_pos_switch int, i2_pos_switch int, i5_light_barrier int, m1_speed int, o7_valve string, o8_compressor int);

@sink(type = 'log', prefix = 'LowLevel Log', priority = 'INFO')
@sink(type = 'mqtt', url = 'mockurl', client.id = 'mqtt.stat1.Burn.ll', topic = 'ActivityEvents/LowLevel', username = 'mockuser', password = 'mockpw', @map(type = 'json'))
define Stream DetectedLowLevelActivityEvents(event string, activity string, ts_first string, ts_second string, ll_pattern_num int);

@sink(type = 'log', prefix = 'HighLevel Log', priority = 'INFO')
@sink(type = 'mqtt', url = 'mockurl', client.id = 'mqtt.stat1.Burn.hl', topic = 'ActivityEvents/HighLevel', username = 'mockuser', password = 'mockpw', @map(type = 'json'))
define Stream DetectedHighLevelActivityEvents(event string, next_pattern string, activity string, ts_first string, ts_second string);

@sink(type = 'log', prefix = 'InstanceLevel Log', priority = 'INFO')
@sink(type = 'mqtt', url = 'mockurl', client.id = 'mqtt.stat1.Burn.il.start', topic = 'DefaultBase/DefaultSource/DefaultCase/Burn', username = 'mockuser', password = 'mockpw', @map(type = 'json', enclosing.element = '$.event', validate.json = 'true', @payload("""{"lifecycle:transition":"start","time:timestamp":"{{ts_start}}", "detection:type": "{{detection_type}}"}""")))
@sink(type = 'mqtt', url = 'mockurl', client.id = 'mqtt.stat1.Burn.il.complete', topic = 'DefaultBase/DefaultSource/DefaultCase/Burn', username = 'mockuser', password = 'mockpw', @map(type = 'json', enclosing.element = '$.event', validate.json = 'true', @payload("""{"lifecycle:transition":"complete","time:timestamp":"{{ts_end}}", "detection:type": "{{detection_type}}"}""")))
define Stream DetectedInstanceLevelActivities(activity string, detection_type string, ts_start string, ts_start_unix long, ts_end string, ts_end_unix long);

@info(name = 'stat1DiscSourceMapper')
from stat1Stream
select timestamp as timestamp, i1_pos_switch as i1_pos_switch, i2_pos_switch as i2_pos_switch, i5_light_barrier as i5_light_barrier, m1_speed as m1_speed, ifThenElse(o7_valve < 400.0, 'low', ifThenElse(o7_valve >= 400.0, 'high', 'ERROR')) as o7_valve, o8_compressor as o8_compressor
insert into stat1StreamDisc;

@info(name="HighToLow-Helper")
from every e1 = DetectedLowLevelActivityEvents, e2 = DetectedLowLevelActivityEvents[e1.ll_pattern_num >= e2.ll_pattern_num]
select "HighToLow" as event
insert into HelperStream;

@info(name="Detect-LowLevel-Pattern-1")
from every e1 = stat1StreamDisc, e2 = stat1StreamDisc[(e1.m1_speed==0 and e2.m1_speed==-512) and (e1.o7_valve=='low' and e2.o7_valve=='high')]
select "LowLevel-Pattern-1" as event, "Burn" as activity, e1.timestamp as ts_first, e2.timestamp as ts_second, 1 as ll_pattern_num
insert into DetectedLowLevelActivityEvents;

@info(name="Detect-HighLevel-Pattern-1")
from DetectedLowLevelActivityEvents[event == "LowLevel-Pattern-1"]
select "HighLevel-Pattern-1" as event,  "LowLevel-Pattern-2" as next_pattern, "Burn" as activity, ts_first, ts_second
insert into DetectedHighLevelActivityEvents;

@info(name="Detect-LowLevel-Pattern-2")
from every e1 = stat1StreamDisc, e2 = stat1StreamDisc[(e1.i1_pos_switch==0 and e2.i1_pos_switch==1) and (e1.m1_speed==-512 and e2.m1_speed==0)]
select "LowLevel-Pattern-2" as event, "Burn" as activity, e1.timestamp as ts_first, e2.timestamp as ts_second, 2 as ll_pattern_num
insert into DetectedLowLevelActivityEvents;

@info(name="Detect-HighLevel-Pattern-2")
from every e1 = DetectedHighLevelActivityEvents[event == "HighLevel-Pattern-1"] -> not HelperStream[event == "HighToLow"] and e2 = DetectedLowLevelActivityEvents[event == "LowLevel-Pattern-2" and time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')]
select "HighLevel-Pattern-2" as event,  "LowLevel-Pattern-3" as next_pattern, "Burn" as activity, e2.ts_first as ts_first, e2.ts_second as ts_second
insert into DetectedHighLevelActivityEvents;

@info(name="Detect-LowLevel-Pattern-3")
from every e1 = stat1StreamDisc, e2 = stat1StreamDisc[(e1.o7_valve=='high' and e2.o7_valve=='low')]
select "LowLevel-Pattern-3" as event, "Burn" as activity, e1.timestamp as ts_first, e2.timestamp as ts_second, 3 as ll_pattern_num
insert into DetectedLowLevelActivityEvents;

@info(name="Detect-HighLevel-Pattern-3")
from every e1 = DetectedHighLevelActivityEvents[event == "HighLevel-Pattern-2"] -> not HelperStream[event == "HighToLow"] and e2 = DetectedLowLevelActivityEvents[event == "LowLevel-Pattern-3" and time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')]
select "HighLevel-Pattern-3" as event,  "LowLevel-Pattern-4" as next_pattern, "Burn" as activity, e2.ts_first as ts_first, e2.ts_second as ts_second
insert into DetectedHighLevelActivityEvents;

@info(name="Detect-LowLevel-Pattern-4")
from every e1 = stat1StreamDisc, e2 = stat1StreamDisc[(e1.i1_pos_switch==1 and e2.i1_pos_switch==0) and (e1.m1_speed==0 and e2.m1_speed==512) and (e1.o7_valve=='low' and e2.o7_valve=='high')]
select "LowLevel-Pattern-4" as event, "Burn" as activity, e1.timestamp as ts_first, e2.timestamp as ts_second, 4 as ll_pattern_num
insert into DetectedLowLevelActivityEvents;

@info(name="Detect-HighLevel-Pattern-4")
from every e1 = DetectedHighLevelActivityEvents[event == "HighLevel-Pattern-3"] -> not HelperStream[event == "HighToLow"] and e2 = DetectedLowLevelActivityEvents[event == "LowLevel-Pattern-4" and time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')]
select "HighLevel-Pattern-4" as event,  "LowLevel-Pattern-5" as next_pattern, "Burn" as activity, e2.ts_first as ts_first, e2.ts_second as ts_second
insert into DetectedHighLevelActivityEvents;

@info(name="Detect-LowLevel-Pattern-5")
from every e1 = stat1StreamDisc, e2 = stat1StreamDisc[(e1.i2_pos_switch==0 and e2.i2_pos_switch==1) and (e1.m1_speed==512 and e2.m1_speed==0)]
select "LowLevel-Pattern-5" as event, "Burn" as activity, e1.timestamp as ts_first, e2.timestamp as ts_second, 5 as ll_pattern_num
insert into DetectedLowLevelActivityEvents;

@info(name="Detect-HighLevel-Pattern-5")
from every e1 = DetectedHighLevelActivityEvents[event == "HighLevel-Pattern-4"] -> not HelperStream[event == "HighToLow"] and e2 = DetectedLowLevelActivityEvents[event == "LowLevel-Pattern-5" and time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')]
select "HighLevel-Pattern-5" as event,  "LowLevel-Pattern-6" as next_pattern, "Burn" as activity, e2.ts_first as ts_first, e2.ts_second as ts_second
insert into DetectedHighLevelActivityEvents;

@info(name="Detect-LowLevel-Pattern-6")
from every e1 = stat1StreamDisc, e2 = stat1StreamDisc[(e1.i2_pos_switch==1 and e2.i2_pos_switch==0) and (e1.o7_valve=='high' and e2.o7_valve=='low')]
select "LowLevel-Pattern-6" as event, "Burn" as activity, e1.timestamp as ts_first, e2.timestamp as ts_second, 6 as ll_pattern_num
insert into DetectedLowLevelActivityEvents;

@info(name="Detect-HighLevel-Pattern-6")
from every e1 = DetectedHighLevelActivityEvents[event == "HighLevel-Pattern-5"] -> not HelperStream[event == "HighToLow"] and e2 = DetectedLowLevelActivityEvents[event == "LowLevel-Pattern-6" and time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')]
select "HighLevel-Pattern-6" as event,  "LowLevel-Pattern-7" as next_pattern, "Burn" as activity, e2.ts_first as ts_first, e2.ts_second as ts_second
insert into DetectedHighLevelActivityEvents;

@info(name="Detect-AllHighLevelPattern-InstanceLevelActivity")
from every e1 = DetectedHighLevelActivityEvents[event == "HighLevel-Pattern-1"] -> not HelperStream[event == "HighToLow"] and e2 = DetectedHighLevelActivityEvents[event == "HighLevel-Pattern-6"]
select "Burn" as activity, "AllHighLevelPattern" as detection_type, e1.ts_second as ts_start, time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_start_unix, e2.ts_second as ts_end, time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_end_unix
insert into DetectedInstanceLevelActivities;

@info(name="Detect-First50HighLevelPattern-InstanceLevelActivity")
from every e1 = DetectedHighLevelActivityEvents[event == "HighLevel-Pattern-1"] -> not HelperStream[event == "HighToLow"] and e2 = DetectedHighLevelActivityEvents[event == "HighLevel-Pattern-3"]
select "Burn" as activity, "First50HighLevelPattern" as detection_type, e1.ts_second as ts_start, time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_start_unix, e2.ts_second as ts_end, time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_end_unix
insert into DetectedInstanceLevelActivities;

@info(name="Detect-FirstLastLowLevelPattern-InstanceLevelActivity")
from every e1 = DetectedLowLevelActivityEvents[event == "LowLevel-Pattern-1"] -> not HelperStream[event == "HighToLow"] and e2 = DetectedLowLevelActivityEvents[event == "LowLevel-Pattern-6"]
select "Burn" as activity, "FirstLastLowLevelPattern" as detection_type, e1.ts_second as ts_start, time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_start_unix, e2.ts_second as ts_end, time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_end_unix
insert into DetectedInstanceLevelActivities;

@info(name="Detect-Any25LowLevelPattern-InstanceLevelActivity-Startup")
from e1 = DetectedLowLevelActivityEvents,
	e2 = DetectedLowLevelActivityEvents[e1.ll_pattern_num < ll_pattern_num and time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')]
select "Burn" as activity, "Any25LowLevelPattern" as detection_type, e1.ts_second as ts_start, time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_start_unix, e2.ts_second as ts_end, time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_end_unix
insert into DetectedInstanceLevelActivities;

@info(name="Detect-Any25LowLevelPattern-InstanceLevelActivity")
from every e1 = DetectedLowLevelActivityEvents,
	e2 = DetectedLowLevelActivityEvents[e1.ll_pattern_num >= ll_pattern_num and time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')],
	e3 = DetectedLowLevelActivityEvents[e2.ll_pattern_num < ll_pattern_num and time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')]
select "Burn" as activity, "Any25LowLevelPattern" as detection_type, e2.ts_second as ts_start, time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_start_unix, e3.ts_second as ts_end, time:timestampInMilliseconds(e3.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_end_unix
insert into DetectedInstanceLevelActivities;

@info(name="Detect-Any50LowLevelPattern-InstanceLevelActivity-Startup")
from e1 = DetectedLowLevelActivityEvents,
	e2 = DetectedLowLevelActivityEvents[e1.ll_pattern_num < ll_pattern_num and time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')],
	e3 = DetectedLowLevelActivityEvents[e2.ll_pattern_num < ll_pattern_num and time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')]
select "Burn" as activity, "Any50LowLevelPattern" as detection_type, e1.ts_second as ts_start, time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_start_unix, e3.ts_second as ts_end, time:timestampInMilliseconds(e3.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_end_unix
insert into DetectedInstanceLevelActivities;

@info(name="Detect-Any50LowLevelPattern-InstanceLevelActivity")
from every e1 = DetectedLowLevelActivityEvents,
	e2 = DetectedLowLevelActivityEvents[e1.ll_pattern_num >= ll_pattern_num and time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')],
	e3 = DetectedLowLevelActivityEvents[e2.ll_pattern_num < ll_pattern_num and time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')],
	e4 = DetectedLowLevelActivityEvents[e3.ll_pattern_num < ll_pattern_num and time:timestampInMilliseconds(e3.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')]
select "Burn" as activity, "Any50LowLevelPattern" as detection_type, e2.ts_second as ts_start, time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_start_unix, e4.ts_second as ts_end, time:timestampInMilliseconds(e4.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_end_unix
insert into DetectedInstanceLevelActivities;

@info(name="Detect-Any75LowLevelPattern-InstanceLevelActivity-Startup")
from e1 = DetectedLowLevelActivityEvents,
	e2 = DetectedLowLevelActivityEvents[e1.ll_pattern_num < ll_pattern_num and time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')],
	e3 = DetectedLowLevelActivityEvents[e2.ll_pattern_num < ll_pattern_num and time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')],
	e4 = DetectedLowLevelActivityEvents[e3.ll_pattern_num < ll_pattern_num and time:timestampInMilliseconds(e3.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')],
	e5 = DetectedLowLevelActivityEvents[e4.ll_pattern_num < ll_pattern_num and time:timestampInMilliseconds(e4.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')]
select "Burn" as activity, "Any75LowLevelPattern" as detection_type, e1.ts_second as ts_start, time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_start_unix, e5.ts_second as ts_end, time:timestampInMilliseconds(e5.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_end_unix
insert into DetectedInstanceLevelActivities;

@info(name="Detect-Any75LowLevelPattern-InstanceLevelActivity")
from every e1 = DetectedLowLevelActivityEvents,
	e2 = DetectedLowLevelActivityEvents[e1.ll_pattern_num >= ll_pattern_num and time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')],
	e3 = DetectedLowLevelActivityEvents[e2.ll_pattern_num < ll_pattern_num and time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')],
	e4 = DetectedLowLevelActivityEvents[e3.ll_pattern_num < ll_pattern_num and time:timestampInMilliseconds(e3.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')],
	e5 = DetectedLowLevelActivityEvents[e4.ll_pattern_num < ll_pattern_num and time:timestampInMilliseconds(e4.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')],
	e6 = DetectedLowLevelActivityEvents[e5.ll_pattern_num < ll_pattern_num and time:timestampInMilliseconds(e5.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')]
select "Burn" as activity, "Any75LowLevelPattern" as detection_type, e2.ts_second as ts_start, time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_start_unix, e6.ts_second as ts_end, time:timestampInMilliseconds(e6.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_end_unix
insert into DetectedInstanceLevelActivities;
