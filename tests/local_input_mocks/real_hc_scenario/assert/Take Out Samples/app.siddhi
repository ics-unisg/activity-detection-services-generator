@App:name('DetectTakeOutSamplesApp')

@source(type = 'mqtt', url = 'mockurl', client.id = 'mqtt.HYGIENE_STATION.Take Out Samples', topic = 'mockpref/HYGIENE_STATION', username = 'mockuser', password = 'mockpw',
@map(type = 'json', @attributes(timestamp = '$.timestamp', SeG_ir_long_distance = '$.SeG_ir_long_distance', s22Pa_nfc_status = '$.s22Pa_nfc_status', s22Pa_nfc_tag = '$.s22Pa_nfc_tag', s23UU_button_state = '$.s23UU_button_state', s23xq_load_cell_weight = '$.s23xq_load_cell_weight')))
define stream HYGIENE_STATIONStream(timestamp string, SeG_ir_long_distance float, s22Pa_nfc_status int, s22Pa_nfc_tag int, s23UU_button_state int, s23xq_load_cell_weight int);

define stream HYGIENE_STATIONStreamDisc(timestamp string, SeG_ir_long_distance string, s22Pa_nfc_status int, s22Pa_nfc_tag int, s23UU_button_state int, s23xq_load_cell_weight string);

@source(type = 'mqtt', url = 'mockurl', client.id = 'mqtt.LEFT_DONATION.Take Out Samples', topic = 'mockpref/LEFT_DONATION', username = 'mockuser', password = 'mockpw',
@map(type = 'json', @attributes(timestamp = '$.timestamp', Sj7_motion_status = '$.Sj7_motion_status', TGJ_ir_short_distance = '$.TGJ_ir_short_distance', VDY_accel_z = '$.VDY_accel_z', VMM_button_l_pressed = '$.VMM_button_l_pressed', VMM_button_r_pressed = '$.VMM_button_r_pressed', s22P4_nfc_status = '$.s22P4_nfc_status', s22P4_nfc_tag = '$.s22P4_nfc_tag', s23V3_button_state = '$.s23V3_button_state', s25JW_ambient_light_illuminance = '$.s25JW_ambient_light_illuminance')))
define stream LEFT_DONATIONStream(timestamp string, Sj7_motion_status int, TGJ_ir_short_distance float, VDY_accel_z int, VMM_button_l_pressed int, VMM_button_r_pressed int, s22P4_nfc_status int, s22P4_nfc_tag int, s23V3_button_state int, s25JW_ambient_light_illuminance float);

define stream LEFT_DONATIONStreamDisc(timestamp string, Sj7_motion_status int, TGJ_ir_short_distance string, VDY_accel_z string, VMM_button_l_pressed int, VMM_button_r_pressed int, s22P4_nfc_status int, s22P4_nfc_tag int, s23V3_button_state int, s25JW_ambient_light_illuminance string);

@sink(type = 'log', prefix = 'LowLevel Log', priority = 'INFO')
@sink(type = 'mqtt', url = 'mockurl', client.id = 'mqtt.HYGIENE_STATION-LEFT_DONATION.Take Out Samples.ll', topic = 'ActivityEvents/LowLevel', username = 'mockuser', password = 'mockpw', @map(type = 'json'))
define Stream DetectedLowLevelActivityEvents(event string, activity string, ts_first string, ts_second string, ll_pattern_num int);

@sink(type = 'log', prefix = 'HighLevel Log', priority = 'INFO')
@sink(type = 'mqtt', url = 'mockurl', client.id = 'mqtt.HYGIENE_STATION-LEFT_DONATION.Take Out Samples.hl', topic = 'ActivityEvents/HighLevel', username = 'mockuser', password = 'mockpw', @map(type = 'json'))
define Stream DetectedHighLevelActivityEvents(event string, next_pattern string, activity string, ts_first string, ts_second string);

@sink(type = 'log', prefix = 'InstanceLevel Log', priority = 'INFO')
@sink(type = 'mqtt', url = 'mockurl', client.id = 'mqtt.HYGIENE_STATION-LEFT_DONATION.Take Out Samples.il.start', topic = 'DefaultBase/DefaultSource/DefaultCase/Take Out Samples', username = 'mockuser', password = 'mockpw', @map(type = 'json', enclosing.element = '$.event', validate.json = 'true', @payload("""{"lifecycle:transition":"start","time:timestamp":"{{ts_start}}", "detection:type": "{{detection_type}}"}""")))
@sink(type = 'mqtt', url = 'mockurl', client.id = 'mqtt.HYGIENE_STATION-LEFT_DONATION.Take Out Samples.il.complete', topic = 'DefaultBase/DefaultSource/DefaultCase/Take Out Samples', username = 'mockuser', password = 'mockpw', @map(type = 'json', enclosing.element = '$.event', validate.json = 'true', @payload("""{"lifecycle:transition":"complete","time:timestamp":"{{ts_end}}", "detection:type": "{{detection_type}}"}""")))
define Stream DetectedInstanceLevelActivities(activity string, detection_type string, ts_start string, ts_start_unix long, ts_end string, ts_end_unix long);

@info(name = 'HYGIENE_STATIONDiscSourceMapper')
from HYGIENE_STATIONStream
select timestamp as timestamp, ifThenElse(SeG_ir_long_distance < 50.0, 'low', ifThenElse(SeG_ir_long_distance >= 50.0 and SeG_ir_long_distance <= 120.0, 'medium', ifThenElse(SeG_ir_long_distance > 120.0, 'high', 'ERROR'))) as SeG_ir_long_distance, s22Pa_nfc_status as s22Pa_nfc_status, s22Pa_nfc_tag as s22Pa_nfc_tag, s23UU_button_state as s23UU_button_state, ifThenElse(s23xq_load_cell_weight <= 300.0, 'low', ifThenElse(s23xq_load_cell_weight > 300.0, 'high', 'ERROR')) as s23xq_load_cell_weight
insert into HYGIENE_STATIONStreamDisc;

@info(name = 'LEFT_DONATIONDiscSourceMapper')
from LEFT_DONATIONStream
select timestamp as timestamp, Sj7_motion_status as Sj7_motion_status, ifThenElse(TGJ_ir_short_distance <= 10.5, 'low', ifThenElse(TGJ_ir_short_distance > 10.5 and TGJ_ir_short_distance <= 20.0, 'medium', ifThenElse(TGJ_ir_short_distance > 20.0, 'high', 'ERROR'))) as TGJ_ir_short_distance, ifThenElse(VDY_accel_z < -7000.0, 'direction1', ifThenElse(VDY_accel_z >= -7000.0 and VDY_accel_z <= -5000.0, 'baseline', ifThenElse(VDY_accel_z > -5000.0, 'direction2', 'ERROR'))) as VDY_accel_z, VMM_button_l_pressed as VMM_button_l_pressed, VMM_button_r_pressed as VMM_button_r_pressed, s22P4_nfc_status as s22P4_nfc_status, s22P4_nfc_tag as s22P4_nfc_tag, s23V3_button_state as s23V3_button_state, ifThenElse(s25JW_ambient_light_illuminance < 190.0, 'low', ifThenElse(s25JW_ambient_light_illuminance >= 190.0 and s25JW_ambient_light_illuminance <= 350.0, 'medium', ifThenElse(s25JW_ambient_light_illuminance > 350.0, 'high', 'ERROR'))) as s25JW_ambient_light_illuminance
insert into LEFT_DONATIONStreamDisc;

@info(name="HighToLow-Helper")
from every e1 = DetectedLowLevelActivityEvents, e2 = DetectedLowLevelActivityEvents[e1.ll_pattern_num >= e2.ll_pattern_num]
select "HighToLow" as event
insert into HelperStream;

@info(name="Detect-PartLowLevel-Pattern-1-HYGIENE_STATION")
from every e1 = HYGIENE_STATIONStreamDisc, e2 = HYGIENE_STATIONStreamDisc[(e1.SeG_ir_long_distance == 'low' and e2.SeG_ir_long_distance == 'medium')]
select "PartLowLevel-Pattern-1-HYGIENE_STATION" as event, "Take Out Samples" as activity, e1.timestamp as ts_first, e2.timestamp as ts_second, 1 as ll_pattern_num
insert into PartLowLevelPatternHYGIENE_STATIONEvents;

@info(name="Detect-PartLowLevel-Pattern-1-LEFT_DONATION")
from every e1 = LEFT_DONATIONStreamDisc, e2 = LEFT_DONATIONStreamDisc[(e1.VDY_accel_z == 'baseline' and e2.VDY_accel_z == 'direction1')]
select "PartLowLevel-Pattern-1-LEFT_DONATION" as event, "Take Out Samples" as activity, e1.timestamp as ts_first, e2.timestamp as ts_second, 1 as ll_pattern_num
insert into PartLowLevelPatternLEFT_DONATIONEvents;

@info(name="Detect-LowLevel-Pattern-1")
from every (eHYGIENE_STATION = PartLowLevelPatternHYGIENE_STATIONEvents[ll_pattern_num == 1] and eLEFT_DONATION = PartLowLevelPatternLEFT_DONATIONEvents[ll_pattern_num == 1]) within 166667 milliseconds
select "LowLevel-Pattern-1" as event, "Take Out Samples" as activity, ifThenElse(time:timestampInMilliseconds(eHYGIENE_STATION.ts_first, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(eLEFT_DONATION.ts_first, 'yyyy-MM-dd HH:mm:ss.SS'), eHYGIENE_STATION.ts_first, eLEFT_DONATION.ts_first) as ts_first, ifThenElse(time:timestampInMilliseconds(eHYGIENE_STATION.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') > time:timestampInMilliseconds(eLEFT_DONATION.ts_second, 'yyyy-MM-dd HH:mm:ss.SS'), eHYGIENE_STATION.ts_second, eLEFT_DONATION.ts_second) as ts_second, 1 as ll_pattern_num
insert into DetectedLowLevelActivityEvents;

@info(name="Detect-HighLevel-Pattern-1")
from DetectedLowLevelActivityEvents[event == "LowLevel-Pattern-1"]
select "HighLevel-Pattern-1" as event,  "LowLevel-Pattern-2" as next_pattern, "Take Out Samples" as activity, ts_first, ts_second
insert into DetectedHighLevelActivityEvents;

@info(name="Detect-LowLevel-Pattern-2")
from every e1 = LEFT_DONATIONStreamDisc, e2 = LEFT_DONATIONStreamDisc[(e1.VDY_accel_z=='direction1' and e2.VDY_accel_z=='direction2')]
select "LowLevel-Pattern-2" as event, "Take Out Samples" as activity, e1.timestamp as ts_first, e2.timestamp as ts_second, 2 as ll_pattern_num
insert into DetectedLowLevelActivityEvents;

@info(name="Detect-HighLevel-Pattern-2")
from every e1 = DetectedHighLevelActivityEvents[event == "HighLevel-Pattern-1"] -> not HelperStream[event == "HighToLow"] and e2 = DetectedLowLevelActivityEvents[event == "LowLevel-Pattern-2" and time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')]
select "HighLevel-Pattern-2" as event,  "LowLevel-Pattern-3" as next_pattern, "Take Out Samples" as activity, e2.ts_first as ts_first, e2.ts_second as ts_second
insert into DetectedHighLevelActivityEvents;

@info(name="Detect-AllHighLevelPattern-InstanceLevelActivity")
from every e1 = DetectedHighLevelActivityEvents[event == "HighLevel-Pattern-1"] -> not HelperStream[event == "HighToLow"] and e2 = DetectedHighLevelActivityEvents[event == "HighLevel-Pattern-2"]
select "Take Out Samples" as activity, "AllHighLevelPattern" as detection_type, e1.ts_second as ts_start, time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_start_unix, e2.ts_second as ts_end, time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_end_unix
insert into DetectedInstanceLevelActivities;

@info(name="Detect-First50HighLevelPattern-InstanceLevelActivity")
from every e1 = DetectedHighLevelActivityEvents[event == "HighLevel-Pattern-1"]
select "Take Out Samples" as activity, "First50HighLevelPattern" as detection_type, e1.ts_second as ts_start, time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_start_unix, e1.ts_second as ts_end, time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_end_unix
insert into DetectedInstanceLevelActivities;

@info(name="Detect-FirstLastLowLevelPattern-InstanceLevelActivity")
from every e1 = DetectedLowLevelActivityEvents[event == "LowLevel-Pattern-1"] -> not HelperStream[event == "HighToLow"] and e2 = DetectedLowLevelActivityEvents[event == "LowLevel-Pattern-2"]
select "Take Out Samples" as activity, "FirstLastLowLevelPattern" as detection_type, e1.ts_second as ts_start, time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_start_unix, e2.ts_second as ts_end, time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_end_unix
insert into DetectedInstanceLevelActivities;

@info(name="Detect-Any25LowLevelPattern-InstanceLevelActivity-Startup")
from e1 = DetectedLowLevelActivityEvents
select "Take Out Samples" as activity, "Any25LowLevelPattern" as detection_type, e1.ts_second as ts_start, time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_start_unix, e1.ts_second as ts_end, time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_end_unix
insert into DetectedInstanceLevelActivities;

@info(name="Detect-Any25LowLevelPattern-InstanceLevelActivity")
from every e1 = DetectedLowLevelActivityEvents,
	e2 = DetectedLowLevelActivityEvents[e1.ll_pattern_num >= ll_pattern_num and time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')]
select "Take Out Samples" as activity, "Any25LowLevelPattern" as detection_type, e2.ts_second as ts_start, time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_start_unix, e2.ts_second as ts_end, time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_end_unix
insert into DetectedInstanceLevelActivities;

@info(name="Detect-Any50LowLevelPattern-InstanceLevelActivity-Startup")
from e1 = DetectedLowLevelActivityEvents
select "Take Out Samples" as activity, "Any50LowLevelPattern" as detection_type, e1.ts_second as ts_start, time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_start_unix, e1.ts_second as ts_end, time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_end_unix
insert into DetectedInstanceLevelActivities;

@info(name="Detect-Any50LowLevelPattern-InstanceLevelActivity")
from every e1 = DetectedLowLevelActivityEvents,
	e2 = DetectedLowLevelActivityEvents[e1.ll_pattern_num >= ll_pattern_num and time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')]
select "Take Out Samples" as activity, "Any50LowLevelPattern" as detection_type, e2.ts_second as ts_start, time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_start_unix, e2.ts_second as ts_end, time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_end_unix
insert into DetectedInstanceLevelActivities;

@info(name="Detect-Any75LowLevelPattern-InstanceLevelActivity-Startup")
from e1 = DetectedLowLevelActivityEvents,
	e2 = DetectedLowLevelActivityEvents[e1.ll_pattern_num < ll_pattern_num and time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')]
select "Take Out Samples" as activity, "Any75LowLevelPattern" as detection_type, e1.ts_second as ts_start, time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_start_unix, e2.ts_second as ts_end, time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_end_unix
insert into DetectedInstanceLevelActivities;

@info(name="Detect-Any75LowLevelPattern-InstanceLevelActivity")
from every e1 = DetectedLowLevelActivityEvents,
	e2 = DetectedLowLevelActivityEvents[e1.ll_pattern_num >= ll_pattern_num and time:timestampInMilliseconds(e1.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')],
	e3 = DetectedLowLevelActivityEvents[e2.ll_pattern_num < ll_pattern_num and time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') <= time:timestampInMilliseconds(ts_second, 'yyyy-MM-dd HH:mm:ss.SS')]
select "Take Out Samples" as activity, "Any75LowLevelPattern" as detection_type, e2.ts_second as ts_start, time:timestampInMilliseconds(e2.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_start_unix, e3.ts_second as ts_end, time:timestampInMilliseconds(e3.ts_second, 'yyyy-MM-dd HH:mm:ss.SS') as ts_end_unix
insert into DetectedInstanceLevelActivities;
